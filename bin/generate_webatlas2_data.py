#!/usr/bin/env python3
"""
generate_webatlas2_data.py
====================================
Generates webatlas2.0 portal-specific data - using the zarr files generated by the previous steps in
webatlas-pipeline and project annotations tsv file(s - one per project in params.yaml). The project
annotations file contains information that is essential for the portal that cannot be derived from the
zarr files.
"""
import fire
import sys
import os
import csv
from pathlib import Path
import shutil
from webatlas2 import get_scaling_factors
from webatlas2 import zarr2jpeg
from webatlas2 import get_feature_coordinates
from webatlas2 import get_hierarchical_entity_coordinates
from timeit import default_timer as timer

def generate_webatlas2_data(
        zarr_dir, project, project_annotations_path
) -> None:
    if not project_annotations_path:
        return
    output_dir = os.path.join(zarr_dir, project)
    # Create output_dir if it doesn't exist already
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    raw_zarr_regex = 'raw.zarr'
    anndata_zarr_regex = 'anndata.zarr'
    config_regex = 'config.json'
    anndata_zarrs = []
    # Output files generate by this script
    feature_coordinates_path = os.path.join(output_dir, "feature_coordinates.json")
    section_annotations_path = os.path.join(output_dir, "section_annotations.tsv")
    # The level in pyramidal tiff used to extract the image for the thumbnails in WebAtlas2.0 UI
    thumbnail_level_in_pyramid = 4

    os.chdir(zarr_dir)
    print("About to retrieve thumbnails ..")
    start = timer()
    with open(section_annotations_path, 'w') as f:
        writer = csv.writer(f, delimiter='\t', quoting=csv.QUOTE_NONE, escapechar='\\')
        row = ['img', 'section_title', 'section_description', 'scaling_factor_x', 'scaling_factor_y',
               'min_visium_intensities', 'patient']
        writer.writerow(row)
        raw_zarrs = [f for f in os.listdir() if os.path.isdir(f) and f.endswith(raw_zarr_regex)]
        for zarr in raw_zarrs:
            zattrs_path = os.path.join(zarr, "0", ".zattrs")
            if not os.path.isfile(zattrs_path):
                print("ERROR: {} does not exist in {} - exiting".format(zattrs_path, zarr))
                sys.exit(1)
            thumbnail_fpath = zarr.replace("-" + raw_zarr_regex, ".jpeg")
            thumbnail_fname = Path(thumbnail_fpath).name
            print("Retrieving scaling factors from {} ..".format(zarr))
            (scaling_factor_x, scaling_factor_y) = get_scaling_factors.process(zarr, thumbnail_level_in_pyramid)
            if not scaling_factor_x or not scaling_factor_y:
                print("ERROR: Failed to retrieve scaling factors from {} - exiting".format(zattrs_path))
            print("Copying config json to {}".format(output_dir))
            anndata_zarr = zarr.replace(raw_zarr_regex, anndata_zarr_regex)
            anndata_zarrs.append(anndata_zarr)
            vitessce_config = zarr.replace(raw_zarr_regex, config_regex)
            shutil.copy2(vitessce_config, output_dir)
            print("Retrieving thumbnail from {}".format(zarr))
            (section_title, min_visium_intensities) = zarr2jpeg.process(output_dir, zarr, thumbnail_level_in_pyramid)
            # Note that the front-end does not use min_visium_intensities - it is output into
            # section_annotations_path just for reference - to help explain the difference between
            # what is highlighted in the thumbnail and what is highlighted in the image inside Vitessce.
            # While the front-end doesn't use them, they are needed downstream in the pipeline - in
            # get_feature_coordinates()
            # TODO: Review the population of section_description (and the need for it) - when the real data arrives
            section_description = ""
            # Note: patient information (the rightmost column) is not being populated - currently
            # it needs to be provided manually - after this pipeline has been run.
            # TODO: Review if patient information can be retrieved from zarr file automatically when real data arrives
            row = [thumbnail_fname, section_title, section_description, scaling_factor_x, scaling_factor_y,
                   min_visium_intensities]
            writer.writerow(row)

    if anndata_zarrs:
        print("About to retrieve feature coordinates ..")
        get_feature_coordinates.process(section_annotations_path, feature_coordinates_path, anndata_zarrs)
        for entity_type in ['anatomical_region', 'cell_state', 'cell_type_hierarchical']:
            print("About to retrieve hierarchical entity coordinates for entity_type: {} ..".format(entity_type))
            get_hierarchical_entity_coordinates.process(output_dir, entity_type, project_annotations_path, anndata_zarrs)

    end = timer()
    print("The pipeline took: {}s to run".format(int(end - start)))

if __name__ == "__main__":
    fire.Fire(generate_webatlas2_data)